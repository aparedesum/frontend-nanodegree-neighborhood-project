"use strict";

var ViewModel = function() {
    var me = this;

    //center the map in this position
    var lima = {
        lat: -12.046374,
        lng: -77.042793
    };

    //init properties
    me.locations = ko.observableArray([]);
    me.recomendationsResult = ko.observableArray([]);
    me.filter = ko.observable("");
    me.infoWindow = ko.observable(new google.maps.InfoWindow({}));

    //end point for getting data from foursquare
    var url = "https://api.foursquare.com/v2/venues/search";
    //object that represents the params which will be sent to foursquare api
    var params = {};
    //autogenerated token
    params.oauth_token = "2DPQ3O4ITKQJCRO2O5ASTMDLK5H0IKPOBOCAVL1ZLZAVYTAQ";
    params.v = "20151125";
    params.limit = "10";

    var mapOptions = {
        zoom: 12,
        center: lima,
        rotateControl: true,

        mapTypeControl: true,
        mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            position: google.maps.ControlPosition.TOP_CENTER
        },
        zoomControl: true,
        zoomControlOptions: {
            position: google.maps.ControlPosition.LEFT_CENTER
        },
        scaleControl: true,
        streetViewControl: true,
        streetViewControlOptions: {
            position: google.maps.ControlPosition.LEFT_TOP
        }
    }

    me.map = new google.maps.Map(document.getElementById('map'), mapOptions);

    me.getContent = function(data){
        return "<h3>" + data.name() + "</h3></a>" +
            "<p>" + data.address() + "</p>" +
            "<p>" + data.url() + "</p>";
    };

    //add the listener to all Location Markers 
    me.addListenerToMarkers = function(location) {
        var marker = location.marker();

        marker.addListener('click', function() {
            me.removeAnimations();
            marker.setAnimation(google.maps.Animation.BOUNCE);
            me.setInfoWindow(me.getContent(location), me.map, marker);
            me.map.panTo(marker.position);
            me.searchRecomendations(location);
        });

        google.maps.event.addListener(me.infoWindow(), 'closeclick', function() {
            marker.setAnimation(null);
        });
    };

    //It will show just one InfoWindow in the map 
    me.setInfoWindow = function(content, map, marker) {
        me.infoWindow().setContent(content);
        me.infoWindow().open(map, marker);
    };

    //read the raw locations and push the values in me.markers array
    arrayLocation.forEach(function(data) {
        var location = new Location(data);
        me.locations.push(location);
        me.addListenerToMarkers(location);
    });

    me.removeRecomendationsMarkers = function() {
        ko.utils.arrayForEach(me.recomendationsResult(), function(recomendation) {
            recomendation.marker.setMap(null);
        });
    };

    me.removeLocationMarkers = function() {
        ko.utils.arrayForEach(me.locations(), function(location) {
            location.marker().setMap(null);
        });
    };

    me.removeAnimations = function() {
        me.locations().forEach(function(location) {
            location.marker().setAnimation(null);
        });

        if(me.recomendationsResult.length > 0){
            me.recomendationsResult().forEach(function(recomendation) {
                recomendation.marker.setAnimation(null);
            });    
        }    
    }

    //get the filtered values after typing in the input field
    me.filteredLocations = ko.computed(function() {
        var filter = me.filter().toLowerCase();

        me.removeLocationMarkers(); 
        me.removeAnimations();
        me.setInfoWindow(null, null, null);

        var result = [];

        if (!filter) {
            result = me.locations();
        } else {
            result = ko.utils.arrayFilter(this.locations(), function(item) {
                return item.name().toLowerCase().indexOf(filter.toLowerCase()) !== -1;
            });
        }

        if (result.length === 0) {
            result.push({
                name: "No results..."
            });
        } else {
            result.forEach(function(data) {
                data.marker().setMap(me.map);
            });
        }
        
        return result;
    }, me);

    //when click on the left panel related to Locations
    me.focusLocation = function(location) {
        if (location !== null && location.hasOwnProperty("marker")) {            
            me.removeAnimations();
            me.removeRecomendationsMarkers();

            me.setInfoWindow(me.getContent(location), me.map, location.marker());
            me.map.panTo(location.marker().position);
            location.marker().setAnimation(google.maps.Animation.BOUNCE);
            me.searchRecomendations(location);
        }
    };

    //It is called after you click a location marker
    me.searchRecomendations = function(location) {
        params.ll = location.location().lat + "," + location.location().lng;
        var request = $.ajax({
            method: "GET",
            dataType: "json",
            url: url,
            data: params
        }).
        done(function(data) {
            me.removeRecomendationsMarkers();
            me.recomendationsResult.removeAll();
            if (data.response !== null) {
                var venues = data.response.venues;
                venues.forEach(function(venue) {                    
                    if (venue.name !== null && venue.name !== "") {                        
                        me.recomendationsResult.push(new Recomendation(venue));
                    }
                });
            }
        }).
        fail(function(jqXHR, textStatus) {
            alert("Problems loading foursquare recommendations, pleasy try later");
        });
    };

    me.focusRecomendation = function(recomendation) {
        if (recomendation !== null && recomendation.hasOwnProperty("marker")) {            
            var marker = recomendation.marker;
            marker.setMap(me.map);
            me.setOptionsRecomendation(recomendation, marker);            

            marker.addListener('click', function() {
                me.setOptionsRecomendation(recomendation, marker);            
            });

            google.maps.event.addListener(me.infoWindow(), 'closeclick', function() {
                marker.setAnimation(null);
            });
        }
    };

    me.setOptionsRecomendation = function(recomendation, marker){
        me.removeAnimations();
        marker.setAnimation(google.maps.Animation.BOUNCE);
        me.setInfoWindow(me.getContent(recomendation), me.map, marker);
        me.map.panTo(marker.position);
    };
};

ko.applyBindings(new ViewModel());